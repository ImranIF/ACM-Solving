#include<bits/stdc++.h>
#include<ext/pb_ds/tree_policy.hpp>
#include<ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
using namespace std;

///--->>> CONTAINERS <<<---///
using i64 = int64_t;
using ll = long long;
using ld = long double;
using vi = vector<ll>;
using vvi = vector<vector< ll > >;
using vpi = vector<pair<ll,ll> >;
using pi = pair<ll,ll>;
using st = set<ll>;
using stk = stack<ll>;
using kiwi = queue<ll>;
using pkiwi = priority_queue<ll>;
using mp = map<ll,ll>;
using ump = unordered_map<ll,ll>;

///--->>> TEMPLATES <<<---///
template<typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update >;

///--->>> MACROS<<<---///
const ll mx = 3e5+123;
#define MOD 998244353
#define mod 1000000007
#define isb(z) __builtin_popcount(z)
#define lisb(z) __builtin_popcountll(z)
#define iclz(z) __builtin_clz(z)
#define lclz(z) __builtin_clzll(z)
#define ictz(z) __builtin_ctz(z)
#define lctz(z) __builtin_ctzll(z)
#define REP(i,n) for (ll i=1;i<=n;++i)
#define fastio ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);

///--->>>OPTIMIZE<<<---///
#pragma GCC target ("avx2")
#pragma GCC optimization ("O3")
#pragma GCC optimization ("unroll-loops")

///--->>> DEBUGGER<<<---///
#define dbg(args...) do {cerr<<#args<<" : "; diraf(args); } while(0)
void diraf ()  {        cerr << endl;}
template < typename T, typename ... hello>void diraf( T arg, const hello &... rest) {cerr<<arg<< ' ';diraf(rest...);}

///--->>> RANDOMIZER<<<---///
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
/* usage - just do rng() */

//bool flag;
bool status[10000123]; ///All status elements assigned to zero, status[i]=0 means prime and 1 means composite
vi prime;   ///vector to contain all prime numbers
void sieve(ll N){
///    ll N =10000000;
    for(ll i=4;i<=N;i+=2)
        status[i]=1;
    for(ll i=3;i*i<=N;i+=2){ ///Composite numbers are divisible by the prime numbers of less than its square root; unlike primes
        if(status[i]==0){
            for(ll j=i*i;j<=N;j+=i)
                status[j]=1;
        }
    }

    prime.emplace_back(2);  ///Only even prime number
    for(ll i=3;i<=N;i+=2){
        if(status[i]==0) prime.emplace_back(i);
    }

}
int main(int argc, char* argv[]){
    fastio;
    cin.exceptions(cin.failbit);
    ll n; cin>>n;
	///ll ans = (n&1? n:n+1);
	vi a;
	a.emplace_back(n);
	while(n>2){
		n--;
		a.emplace_back(n);
		}
	//ss-=1;
	ll ans = 1; 
    for (size_t i = 0; i < a.size(); i++) 
        ans = ((a[i] * ans) / (__gcd(a[i], ans))); 
		cout<<ans + 1<<endl;


return 0;
}
