#include<bits/stdc++.h>
#include<ext/pb_ds/tree_policy.hpp>
#include<ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
using namespace std;

///--->>> CONTAINERS <<<---///
using i64 = int64_t;
using ll = long long;
using ld = long double;
using vi = vector<ll>;
using vvi = vector<vector< ll > >;
using vpi = vector<pair<ll,ll> >;
using pi = pair<ll,ll>;
using st = set<ll>;
using stk = stack<ll>;
using kiwi = queue<ll>;
using pkiwi = priority_queue<ll>;
using mp = map<ll,ll>;
using ump = unordered_map<ll,ll>;

///--->>> TEMPLATES <<<---///
template<typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update >;

///--->>> MACROS<<<---///
const ll mx = 3e6+123;
#define MOD 998244353
#define mod 1000000007
#define isb(z) __builtin_popcount(z)
#define lisb(z) __builtin_popcountll(z)
#define iclz(z) __builtin_clz(z)
#define lclz(z) __builtin_clzll(z)
#define ictz(z) __builtin_ctz(z)
#define lctz(z) __builtin_ctzll(z)
#define REP(i,n) for (ll i=1;i<=n;++i)
#define fastio ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);

///--->>>OPTIMIZE<<<---///
#pragma GCC target ("avx2")
#pragma GCC optimization ("O3")
#pragma GCC optimization ("unroll-loops")
///--->>> DEBUGGER<<<---///
#define dbg(args...) do {cerr<<#args<<" : "; diraf(args); } while(0)
void diraf ()  {        cerr << endl;}
template < typename T, typename ... hello>void diraf( T arg, const hello &... rest) {cerr<<arg<< ' ';diraf(rest...);}

///--->>> RANDOMIZER<<<---///
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
/* usage - just do rng() */

vi arrA, arrB;

void computeSum(vi a, ll ini, ll n){
	for(ll i = 1; i<(1<<n); ++i){
	 	ll sum = 0;
	 	for(ll j = 0; j<n; ++j){
	 		if(i & (1<<j))
	 			sum += a[ini + j];
	 	}
	 	if(ini == 0) arrA[i] = sum;
	 	else arrB[i] = sum;
//	 	x[i] = sum;
//	 	dbg(x[i], sum);
	}

}

int main(int argc, char* argv[]){
    fastio;
    cin.exceptions(cin.failbit);
    ///freopen("input.txt","r",stdin);
    ///freopen("output.txt","w",stdout);
    ///cout<<fixed<<setprecision(20);
	ll n, time; cin>>n>>time;
	vi a(n);
	ll mn = INT_MAX, sum = 0;
	for(ll i=0; i<n; ++i)
		cin>>a[i], sum+=a[i], mn = min(mn, a[i]);
	if(mn > time){
		cout<<0<<endl;
		}
	else if(time >= sum){
		cout<<sum<<endl;
		}
	else{ ///meet in the middle
		arrA.assign(1<<(n/2 + 1), 0), arrB.assign(1<<(n/2 + 1), 0);
		computeSum(a, 0, n/2);
		computeSum(a, n/2, n - n/2);
		sort(arrB.begin(),arrB.end());
		ll maxSum = 0;
		for(size_t i = 0; i<arrA.size(); ++i){

			if(arrA[i] <= time){
				size_t idx = lower_bound(arrB.begin(), arrB.end(), time - arrA[i]) - arrB.begin();

				if(idx >= arrB.size() || arrB[idx]!= time - arrA[i])
					idx--;
				maxSum = max(maxSum, arrA[i] + arrB[idx]);;
			}

		}
	    cout<<maxSum<<endl;
				
	}
	return 0;
}
