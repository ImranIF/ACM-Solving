#include<bits/stdc++.h>
#include<ext/pb_ds/tree_policy.hpp>
#include<ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
using namespace std;

///--->>> CONTAINERS <<<---///
using i64 = int64_t;
using ll = long long;
using ld = long double;
using vi = vector<ll>;
using vvi = vector<vector< ll > >;
using vpi = vector<pair<ll,ll> >;
using pi = pair<ll,ll>;
using st = set<ll>;
using stk = stack<ll>;
using kiwi = queue<ll>;
using pkiwi = priority_queue<ll>;
using mp = map<ll,ll>;
using ump = unordered_map<ll,ll>;

///--->>> TEMPLATES <<<---///
template<typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update >;

///--->>> MACROS<<<---///
const ll mx = 3e5+123;
#define MOD 998244353
#define mod 1000000007
#define isb(z) __builtin_popcount(z)
#define lisb(z) __builtin_popcountll(z)
#define iclz(z) __builtin_clz(z)
#define lclz(z) __builtin_clzll(z)
#define ictz(z) __builtin_ctz(z)
#define lctz(z) __builtin_ctzll(z)
#define REP(i,n) for (ll i=1;i<=n;++i)
#define fastio ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);

///--->>>OPTIMIZE<<<---///
#pragma GCC target ("avx2")
#pragma GCC optimization ("O3")
#pragma GCC optimization ("unroll-loops")

///--->>> DEBUGGER<<<---///
#define dbg(args...) do {cerr<<#args<<" : "; diraf(args); } while(0)
void diraf ()  {        cerr << endl;}
template < typename T, typename ... hello>void diraf( T arg, const hello &... rest) {cerr<<arg<< ' ';diraf(rest...);}

///--->>> RANDOMIZER<<<---///
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
/* usage - just do rng() */

vector<vector<char>> a;
int main(int argc, char* argv[]){
    fastio;
    cin.exceptions(cin.failbit);
    ///freopen("input.txt","r",stdin);
    ///freopen("output.txt","w",stdout);
    ///cout<<fixed<<setprecision(20);
	ll tc; cin>>tc;
	while(tc--){
        ll r, c, ans = 0, widPref, widSuf; cin>>r>>c;
        a.assign(r+1, vector<char>(c+1, '*'));
        vector<vector<ll> > width(r+1, vi(c+1, 0));
        for(ll i = 0; i <r; ++i){
            for(ll j = 0 ; j<c; ++j){
                cin>>a[i][j];
                if(a[i][j]=='*') ans++;
            }
        }
        for(ll i = 0 ; i <r; ++i){
            for(ll j = 0 ; j <c; ++j){
                widSuf = 0, widPref = 0;
                if(a[i][j] == '.') continue;
                for(ll col = j+ 1; col < c; ++col){
                    if(a[i][col] == '.') break;
                    else widSuf++;
                }
                for(ll col = j-1; col >= 0; --col){
                    if(a[i][col] == '.') break;
                    else widPref++;
                }
                width[i][j] = min(widPref, widSuf);
            }
        }
        for(ll i = 0; i < r-1; ++i){
            for(ll j = 0 ; j <c; ++j){
                for(ll depth = 1; depth < r; ++depth){
                    if(a[i][j] == '*' && a[i+depth][j] == '*' && width[i+depth][j] >= depth) ans++;
                    else break;
                }
            }
        }

        cout<<ans<<endl;
    }

return 0;
}
