#include<bits/stdc++.h>
#include<ext/pb_ds/tree_policy.hpp>
#include<ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
using namespace std;

///--->>> CONTAINERS <<<---///
using i64 = int64_t;
using ll = long long;
using ld = long double;
using vi = vector<ll>;
using vvi = vector<vector< ll > >;
using vpi = vector<pair<ll,ll> >;
using pi = pair<ll,ll>;
using st = set<ll>;
using stk = stack<ll>;
using kiwi = queue<ll>;
using pkiwi = priority_queue<ll>;
using mp = map<ll,ll>;
using ump = unordered_map<ll,ll>;

///--->>> TEMPLATES <<<---///
template<typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update >;

///--->>> MACROS<<<---///
const ll mx = 3e5+123;
#define MOD 998244353
#define mod 1000000007
#define isb(z) __builtin_popcount(z)
#define lisb(z) __builtin_popcountll(z)
#define iclz(z) __builtin_clz(z)
#define lclz(z) __builtin_clzll(z)
#define ictz(z) __builtin_ctz(z)
#define lctz(z) __builtin_ctzll(z)
#define REP(i,n) for (ll i=1;i<=n;++i)
#define fastio ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);

///--->>>OPTIMIZE<<<---///
#pragma GCC target ("avx2")
#pragma GCC optimization ("O3")
#pragma GCC optimization ("unroll-loops")

///--->>> DEBUGGER<<<---///
#define dbg(args...) do {cerr<<#args<<" : "; diraf(args); } while(0)
void diraf ()  {        cerr << endl;}
template < typename T, typename ... hello>void diraf( T arg, const hello &... rest) {cerr<<arg<< ' ';diraf(rest...);}

///--->>> RANDOMIZER<<<---///
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
/* usage - just do rng() */

int main(int argc, char* argv[]){
    fastio;
    cin.exceptions(cin.failbit);
    ll tc; cin>>tc;
    while(tc--){
        ll n, q, x, y; cin>>n>>q;
        ///vpi cnt;
        string str; cin>>str;
        while(q--){
            cin>>x>>y;
            --x, -- y;
            bool okay = false;
            for(ll i=0; i<x; ++i){
            	if(str[i] == str[x]) {okay = true; break;}
            	}
            for(ll i = y+1; i<str.size(); ++i)
            	{
            	if(str[i] == str[y]) {
            	 	okay = true; break;
            		}
            	}
        cout<<(okay? "Yes":"No")<<endl;
           /* string qq;
            for(ll i = x -1; i<y;++i)
                qq +=str[i];
            ll ini = 0;
            dbg(qq);
            bool okay = false;
            for(ll i =0;i<str.size();++i){
                    ini = 0, cons = 0;
                for(ll j = i;j<str.size();++j){
                    if(str[j]==qq[ini] && cons<2) {ini++; cons++; }
                    if(j+2<str.size())
                        if(str[j+2] == qq[ini]) ++j, cons = 0;
                }
                if(ini == qq.size()) {okay = true; break;} ///dbg(ini);
            }
            if(okay)
                cout<<"YES"<<endl;
            else cout<<"NO"<<endl;*/
        }
    }

return 0;
}
