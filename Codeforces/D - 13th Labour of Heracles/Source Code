#include<bits/stdc++.h>
#include<ext/pb_ds/tree_policy.hpp>
#include<ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
using namespace std;

///--->>> CONTAINERS <<<---///
using i64 = int64_t;
using ll = long long;
using ld = long double;
using vi = vector<ll>;
using vvi = vector<vector< ll > >;
using vpi = vector<pair<ll,ll> >;
using pi = pair<ll,ll>;
using st = set<ll>;
using stk = stack<ll>;
using kiwi = queue<ll>;
using pkiwi = priority_queue<ll>;
using mp = map<ll,ll>;
using ump = unordered_map<ll,ll>;

///--->>> TEMPLATES <<<---///
template<typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update >;

template<typename T>
T pow(T a, T b){ll ans = 1; while(b>0) { if(b&1) ans*=a, b--; else a*=a, b>>=1;} return ans; }

///--->>> MACROS<<<---///
const ll mx = 3e5+123;
#define MOD 998244353
#define mod 1000000007
#define isb(z) __builtin_popcount(z)
#define lisb(z) __builtin_popcountll(z)
#define iclz(z) __builtin_clz(z)
#define lclz(z) __builtin_clzll(z)
#define ictz(z) __builtin_ctz(z)
#define lctz(z) __builtin_ctzll(z)
#define REP(i,n) for (ll i=1;i<=n;++i)
#define fastio ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);

///--->>>OPTIMIZE<<<---///
#pragma GCC target ("avx2")
#pragma GCC optimization ("O3")
#pragma GCC optimization ("unroll-loops")

///--->>> DEBUGGER<<<---///
#define dbg(args...) do {cerr<<#args<<" : "; diraf(args); } while(0)
void diraf ()  {
    cerr << endl;
}
template < typename T, typename ... hello>
void diraf( T arg, const hello &... rest) {
    cerr<<arg<< ' ';
    diraf(rest...);
}

///--->>> RANDOMIZER<<<---///
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
/* usage - just do rng() */

///vector<bool> visited;

int main(int argc, char* argv[]){
    fastio;
    cin.exceptions(cin.failbit);
    ///freopen("input.txt","r",stdin);
    ///freopen("output.txt","w",stdout);
    ///cout<<fixed<<setprecision(20);
    ll tc; cin>>tc;
    while(tc--){
        ll n, n1, n2, e; cin>>n;
        vi weight(n+1);
        map<ll, bool> mp;
        pkiwi colors;
        ll ans = 0;
        /// visited.assign(n+1, 0);
        for(ll i = 1; i <=n; ++i)
            cin>>weight[i], ans+=weight[i];
        for(ll i = 1; i <n; ++i){
            cin>>n1>>n2;
            if(mp.count(n1))
            	colors.emplace(weight[n1]);
            mp[n1] = 1;
            if(mp.count(n2))
            	colors.emplace(weight[n2]);
            mp[n2] = 1;
        }
		cout<<ans<<" ";
		e = n - 2;
		while(e--){
		 	ans+=colors.top();
		 	colors.pop();
		 	cout<<ans<<" ";
		}
		cout<<endl;                                         	
    }

return 0;
}
