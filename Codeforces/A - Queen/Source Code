#include<bits/stdc++.h>
#include<ext/pb_ds/tree_policy.hpp>
#include<ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
using namespace std;

///--->>> CONTAINERS <<<---///
using i64 = int64_t;
using ll = long long;
using ld = long double;
using vi = vector<ll>;
using vvi = vector<vector< ll > >;
using vpi = vector<pair<ll,ll> >;
using pi = pair<ll,ll>;
using st = set<ll>;
using stk = stack<ll>;
using kiwi = queue<ll>;
using pkiwi = priority_queue<ll>;
using mp = map<ll,ll>;
using ump = unordered_map<ll,ll>;

///--->>> TEMPLATES <<<---///
template<typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update >;

///--->>> MACROS<<<---///
const ll mx = 3e5+123;
#define MOD 998244353
#define mod 1000000007
#define isb(z) __builtin_popcount(z)
#define lisb(z) __builtin_popcountll(z)
#define iclz(z) __builtin_clz(z)
#define lclz(z) __builtin_clzll(z)
#define ictz(z) __builtin_ctz(z)
#define lctz(z) __builtin_ctzll(z)
#define REP(i,n) for (ll i=1;i<=n;++i)
#define fastio ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);

///--->>>OPTIMIZE<<<---///
#pragma GCC target ("avx2")
#pragma GCC optimization ("O3")
#pragma GCC optimization ("unroll-loops")

///--->>> DEBUGGER<<<---///
#define dbg(args...) do {cerr<<#args<<" : "; diraf(args); } while(0)
void diraf ()  {        cerr << endl;}
template < typename T, typename ... hello>void diraf( T arg, const hello &... rest) {cerr<<arg<< ' ';diraf(rest...);}

///--->>> RANDOMIZER<<<---///
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
/* usage - just do rng() */
vi adj[mx];
vvi nodeLift;

void solve(){
	ll n, n1; cin>>n;
	ll c[n+1];

	for(ll i=0; i<n; ++i){
	    cin>>n1>>c[i];
	    if(n1!=-1)
	    	--n1, adj[n1].emplace_back(i); 

	}
	///	cin>>n1>>n2, adj[n1].emplace_back(n2), adj[n2].emplace_back(n1);
	vi ans;
	for(ll i=0; i <n; ++i){
		if(c[i]==1){
		bool pos = 1;
			for(auto& x: adj[i]){
				if(c[x] == 0){
				pos = 0;
				break;
				}
			}
		if(pos){
			ans.emplace_back(i+1);
			}
		}
	}
	if(ans.size()==0) cout<<-1<<endl;			
	else{
	for(auto& x: ans)
		cout<<x<<" ";
	cout<<endl;
	     }
}

int main(int argc, char* argv[]){
    fastio;
    cin.exceptions(cin.failbit);
    ///freopen("input.txt","r",stdin);
    ///freopen("output.txt","w",stdout);
    ///cout<<fixed<<setprecision(20);
    solve();

return 0;
}
