#include<bits/stdc++.h>
#include<ext/pb_ds/tree_policy.hpp>
#include<ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
using namespace std;

///--->>> CONTAINERS <<<---///
using i64 = int64_t;
using ll = long long;
using ld = long double;
using vi = vector<ll>;
using vvi = vector<vector< ll > >;
using vpi = vector<pair<ll,ll> >;
using pi = pair<ll,ll>;
using st = set<ll>;
using stk = stack<ll>;
using kiwi = queue<ll>;
using pkiwi = priority_queue<ll>;
using mp = map<ll,ll>;
using ump = unordered_map<ll,ll>;

///--->>> TEMPLATES <<<---///
template<typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update >;

///--->>> MACROS<<<---///
const ll mx = 3e5+123;
#define MOD 998244353
#define mod 1000000007
#define isb(z) __builtin_popcount(z)
#define lisb(z) __builtin_popcountll(z)
#define iclz(z) __builtin_clz(z)
#define lclz(z) __builtin_clzll(z)
#define ictz(z) __builtin_ctz(z)
#define lctz(z) __builtin_ctzll(z)
#define REP(i,n) for (ll i=1;i<=n;++i)
#define fastio ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);

///--->>>OPTIMIZE<<<---///
#pragma GCC target ("avx2")
#pragma GCC optimization ("O3")
#pragma GCC optimization ("unroll-loops")

///--->>> DEBUGGER<<<---///
#define dbg(args...) do {cerr<<#args<<" : "; diraf(args); } while(0)
void diraf ()  {        cerr << endl;}
template < typename T, typename ... hello>void diraf( T arg, const hello &... rest) {cerr<<arg<< ' ';diraf(rest...);}

///--->>> RANDOMIZER<<<---///
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
/* usage - just do rng() */

vvi mat;
vi best;
vi dp;

void preCalBestRow(ll r, ll c){
	dp.assign(c+1, 0);
	ll ans = 0;
	for(ll i=1;i<=c;++i){
		if(mat[r][i-1]==0) dp[i] = 0;
		if(mat[r][i-1]) dp[i] = dp[i - 1] + 1, ans = max(ans, dp[i]);
      	}
      	 best[r] = ans;
}

int main(int argc, char* argv[]){
    fastio;
    cin.exceptions(cin.failbit);
    ll r, c, q; cin>>r>>c>>q;
    mat.assign(r+1, vi(c+1, 0));
    best.assign(r+1, 0);
    for(ll i=0;i<r;++i){
    	for(ll j =0; j<c; ++j){
    		cin>>mat[i][j];
    		}
    	}
    for(ll i=0; i<r; ++i)
    	preCalBestRow(i, c);		                
    while(q--){
    	ll a, b; cin>>a>>b;
    	mat[--a][--b] ^= 1;
    	preCalBestRow(a, c);
    	ll ans = 0;
	for(ll i=0; i<r; ++i)
		ans = max(ans, best[i]);
	cout<<ans<<'\n'; 	
	}
return 0;
}
